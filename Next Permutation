
vector<int> nextGreaterPermutation(vector<int> &a) {
    int n=a.size();
    int index=-1;
    for(int i=n-2;i>=0;i--){
        if(a[i]<a[i+1]){
            index=i;
            break;
        }
    }
    if(index==-1){
        reverse(a.begin(),a.end());
        return a;
    }


    for(int i=n-1;i>index;i--){
        if(a[i]>a[index]){
            swap(a[i],a[index]);
            break;
        }
    }

    reverse(a.begin()+index+1,a.end());
    return a;



























    // int n = A.size(); 

    // // Step 1: Find the break point:
    // int ind = -1; // break point
    // for (int i = n - 2; i >= 0; i--) {
    //     if (A[i] < A[i + 1]) {
    //         // index i is the break point
    //         ind = i;
    //         break;
    //     }
    // }

    // // If break point does not exist:
    // if (ind == -1) {
    //     // reverse the whole array:
    //     reverse(A.begin(), A.end());
    //     return A;
    // }

    // // Step 2: Find the next greater element
    // //         and swap it with arr[ind]:

    // for (int i = n - 1; i > ind; i--) {
    //     if (A[i] > A[ind]) {
    //         swap(A[i], A[ind]);
    //         break;
    //     }
    // }

    // // Step 3: reverse the right half:
    // reverse(A.begin() + ind + 1, A.end());

    // return A;
}
