//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    int minimumEnergy(std::vector<int>& height, int n) {
        if(n == 0) return 0;
        if(n == 1) return 0;

        std::vector<int> dp(n, 0); // Create a vector of size n with all elements initialized to 0
        dp[0] = 0; // No energy needed to start at the first stone
        dp[1] = std::abs(height[1] - height[0]); // Energy to jump to the second stone

        for(int i = 2; i < n; ++i) {
            int oneStep = dp[i - 1] + std::abs(height[i] - height[i - 1]);
            int twoStep = dp[i - 2] + std::abs(height[i] - height[i - 2]);
            dp[i] = std::min(oneStep, twoStep); // Take the minimum of the two options
        }

        return dp[n - 1];
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        cin >> N;
        vector<int> arr(N);
        for (int i = 0; i < N; i++) {
            cin >> arr[i];
        }
        Solution obj;
        cout << obj.minimumEnergy(arr, N) << "\n";
    }
    return 0;
}
// } Driver Code Ends
